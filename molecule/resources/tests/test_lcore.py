# Copyright (c) 2019 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" Test if DPDK's lcore is setup correctly """
import os

import pytest
import testinfra.utils.ansible_runner

from common import ansible_vars, check_skip_dpdk_tests

TESTINFRA_HOSTS = testinfra.utils.ansible_runner.AnsibleRunner(
    os.environ["MOLECULE_INVENTORY_FILE"]
).get_hosts("all")


@pytest.fixture(scope="module")
def lcore_mask_host(host):
    """ Get DPDK lcore mask from target and return a string with leading '0x'
        stripped """

    lc_mask_cmd = "ovs-vsctl get Open_vSwitch . other_config:dpdk-lcore-mask"
    mask_cmd = None
    with host.sudo():
        if not host.exists("ovs-vsctl"):
            raise Exception("Unable to find ovs-vsctl in PATH")
        mask_cmd = host.run(lc_mask_cmd)
    if not mask_cmd or mask_cmd.failed or \
       not mask_cmd.stdout or "0x" not in mask_cmd.stdout:
        raise Exception("Failed to get lcore mask from command '{cmd}'"
                        .format(cmd=lc_mask_cmd))
    return mask_cmd.stdout.strip('\n"')[2:]


@pytest.fixture(scope="module")
def lcore_core_ids(lcore_mask_host):
    """ Convert CPU ID mask from argument 'lcore_mask' to a list of CPU IDs """

    lcore_cores = []
    binary_mask = bin(int(lcore_mask_host, 16))[2:]
    for i, val in enumerate(binary_mask[::-1]):
        if val == "1":
            lcore_cores.append(i)
    return lcore_cores


@pytest.fixture(scope="module")
def lcore_threads_exec(host, lcore_core_ids):
    """ Get process information of cores associated with lcore and return dict
    """

    ovsd_service_name = "ovs-vswitchd"
    ps_cmd = None
    with host.sudo():
        pid_cmd = host.run("pidof {serv_name}"
                           .format(serv_name=ovsd_service_name))
        if pid_cmd.failed:
            raise Exception("Failed to get pid of process named '{process}'"
                            .format(process=ovsd_service_name))
        ps_thread_cmd = "ps -Lo psr,comm -p {ovsd_pid} --no-headers".format(
            ovsd_pid=pid_cmd.stdout.strip())

        ps_cmd = host.run(ps_thread_cmd)
    if not ps_cmd or ps_cmd.failed:
        raise Exception("Failed to get thread and executable info from '{cmd}'"
                        .format(cmd=ps_thread_cmd))

    lcore_thread_exec_map = {}
    for line in ps_cmd.stdout.splitlines():
        core_id_s, executable = line.strip().split(" ")
        if not core_id_s.isdigit():
            raise Exception("Failed to split & detect core id from '{ln}'"
                            .format(ln=line))
        core_id = int(core_id_s)
        if core_id not in lcore_core_ids:
            continue
        exec_strip_int = strip_int(executable)
        lcore_thread_exec_map.setdefault(core_id, []).append(exec_strip_int)
    return lcore_thread_exec_map


def strip_int(input_str):
    """ Remove integers from a string and return string """

    return ''.join([i for i in input_str if not i.isdigit()])


# The test functions below use the fixture "check_skip_dpdk_tests" to decide if
# the tests should be executed. If the Ansible variable "skip_ovs_dpdk_config"
# is set to True, ovs-dpdk will not be configured on the target host, making
# execution of these tests redundant. Hence, they will be skipped.
@pytest.mark.usefixtures("check_skip_dpdk_tests")
def test_lcore_mask(lcore_mask_host, ansible_vars):
    """ Test to ensure lcore mask generated by Ansible process equals
        lcore mask set in OVS """

    lcore_mask_ansible = ansible_vars["lcore_mask"]
    if not lcore_mask_ansible.startswith("0x"):
        raise Exception("Invalid lcore hex '{mask}' generated from Ansible"
                        .format(mask=lcore_mask_ansible))
    assert lcore_mask_host == lcore_mask_ansible[2:]


@pytest.mark.usefixtures("check_skip_dpdk_tests")
def test_lcore_threads(lcore_core_ids, lcore_threads_exec):
    """ Test if lcore threads are created """

    lowest_core_id = min(lcore_core_ids)
    # If more than one core specified in dpdk-lcore-mask, then ensure a
    # lcore slave thread is spawned on each additional core
    if len(lcore_core_ids) > 1:
        lcore_core_ids.remove(lowest_core_id)
        for core_id in lcore_core_ids:
            assert "lcore-slave-" in lcore_threads_exec[core_id]
